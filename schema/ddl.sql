create table if not exists public.office
(
    id      serial primary key,
    name    text         not null,
    address varchar(100) not null
);

alter table public.office
    owner to postgres;

create table if not exists public.vehicle_models
(
    id             serial
        primary key,
    type           text    not null check (type in
                                           ('SUV', 'Sedan', 'Truck', 'Van',
                                            'Coupe', 'Convertible', 'Wagon',
                                            'Hatchback')),
    make           text    not null,
    model          text    not null,
    year           integer not null,
    price_per_day  numeric(10, 2),
    price_per_hour numeric(10, 2),
    images         text[]  not null default '{}',
    rating         numeric(2, 1) check (rating BETWEEN 0 AND 5),
    unique (make, model, year)
);

alter table public.vehicle_models
    owner to postgres;

create table if not exists public.vehicles
(
    plate_no  varchar(10) not null
        primary key,
    model_id  integer     not null
        references public.vehicle_models,
    color     text        not null,
    office_id integer     not null
        references public.office,
    mileage   integer     not null,
    status    text        not null
);

alter table public.vehicles
    owner to postgres;

create table if not exists public.dropoff
(
    reservation_id serial
        primary key,
    time           timestamp not null
);

alter table public.dropoff
    owner to postgres;

create table if not exists public.payment
(
    reservation_id serial
        primary key,
    amount         numeric(10, 2) not null,
    completed_at   timestamp      not null,
    method         varchar(10)    not null
        constraint payment_method_check
            check ((method)::text = ANY
                   ((ARRAY ['credit'::character varying, 'debit'::character varying, 'cash'::character varying])::text[]))
        constraint payment_method_check1
            check ((method)::text = 'credit'::text),
    credit_card_no varchar(16)
);

alter table public.payment
    owner to postgres;

create table if not exists public.pickup
(
    reservation_id serial
        primary key,
    time           timestamp not null
);

alter table public.pickup
    owner to postgres;

create table if not exists public.django_migrations
(
    id      bigint generated by default as identity
        primary key,
    app     varchar(255)             not null,
    name    varchar(255)             not null,
    applied timestamp with time zone not null
);

alter table public.django_migrations
    owner to postgres;

create table if not exists public.django_content_type
(
    id        integer generated by default as identity
        primary key,
    app_label varchar(100) not null,
    model     varchar(100) not null,
    constraint django_content_type_app_label_model_76bd3d3b_uniq
        unique (app_label, model)
);

alter table public.django_content_type
    owner to postgres;

create table if not exists public.auth_permission
(
    id              integer generated by default as identity
        primary key,
    name            varchar(255) not null,
    content_type_id integer      not null
        constraint auth_permission_content_type_id_2f476e4b_fk_django_co
            references public.django_content_type
            deferrable initially deferred,
    codename        varchar(100) not null,
    constraint auth_permission_content_type_id_codename_01ab375a_uniq
        unique (content_type_id, codename)
);

alter table public.auth_permission
    owner to postgres;

create index if not exists auth_permission_content_type_id_2f476e4b
    on public.auth_permission (content_type_id);

create table if not exists public.auth_group
(
    id   integer generated by default as identity
        primary key,
    name varchar(150) not null
        unique
);

alter table public.auth_group
    owner to postgres;

create index if not exists auth_group_name_a6ea08ec_like
    on public.auth_group (name varchar_pattern_ops);

create table if not exists public.auth_group_permissions
(
    id            bigint generated by default as identity
        primary key,
    group_id      integer not null
        constraint auth_group_permissions_group_id_b120cbf9_fk_auth_group_id
            references public.auth_group
            deferrable initially deferred,
    permission_id integer not null
        constraint auth_group_permissio_permission_id_84c5c92e_fk_auth_perm
            references public.auth_permission
            deferrable initially deferred,
    constraint auth_group_permissions_group_id_permission_id_0cd325b0_uniq
        unique (group_id, permission_id)
);

alter table public.auth_group_permissions
    owner to postgres;

create index if not exists auth_group_permissions_group_id_b120cbf9
    on public.auth_group_permissions (group_id);

create index if not exists auth_group_permissions_permission_id_84c5c92e
    on public.auth_group_permissions (permission_id);

create table if not exists public.auth_user
(
    id           integer generated by default as identity
        primary key,
    password     varchar(128)             not null,
    last_login   timestamp with time zone,
    is_superuser boolean                  not null,
    username     varchar(150)             not null
        unique,
    first_name   varchar(150)             not null,
    last_name    varchar(150)             not null,
    email        varchar(254)             not null,
    is_staff     boolean                  not null,
    is_active    boolean                  not null,
    date_joined  timestamp with time zone not null
);

alter table public.auth_user
    owner to postgres;

create index if not exists auth_user_username_6821ab7c_like
    on public.auth_user (username varchar_pattern_ops);

create table if not exists public.auth_user_groups
(
    id       bigint generated by default as identity
        primary key,
    user_id  integer not null
        constraint auth_user_groups_user_id_6a12ed8b_fk_auth_user_id
            references public.auth_user
            deferrable initially deferred,
    group_id integer not null
        constraint auth_user_groups_group_id_97559544_fk_auth_group_id
            references public.auth_group
            deferrable initially deferred,
    constraint auth_user_groups_user_id_group_id_94350c0c_uniq
        unique (user_id, group_id)
);

alter table public.auth_user_groups
    owner to postgres;

create index if not exists auth_user_groups_user_id_6a12ed8b
    on public.auth_user_groups (user_id);

create index if not exists auth_user_groups_group_id_97559544
    on public.auth_user_groups (group_id);

create table if not exists public.auth_user_user_permissions
(
    id            bigint generated by default as identity
        primary key,
    user_id       integer not null
        constraint auth_user_user_permissions_user_id_a95ead1b_fk_auth_user_id
            references public.auth_user
            deferrable initially deferred,
    permission_id integer not null
        constraint auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm
            references public.auth_permission
            deferrable initially deferred,
    constraint auth_user_user_permissions_user_id_permission_id_14a6b632_uniq
        unique (user_id, permission_id)
);

alter table public.auth_user_user_permissions
    owner to postgres;

create index if not exists auth_user_user_permissions_user_id_a95ead1b
    on public.auth_user_user_permissions (user_id);

create index if not exists auth_user_user_permissions_permission_id_1fbb5f2c
    on public.auth_user_user_permissions (permission_id);

create table if not exists public.django_admin_log
(
    id              integer generated by default as identity
        primary key,
    action_time     timestamp with time zone not null,
    object_id       text,
    object_repr     varchar(200)             not null,
    action_flag     smallint                 not null
        constraint django_admin_log_action_flag_check
            check (action_flag >= 0),
    change_message  text                     not null,
    content_type_id integer
        constraint django_admin_log_content_type_id_c4bce8eb_fk_django_co
            references public.django_content_type
            deferrable initially deferred,
    user_id         integer                  not null
        constraint django_admin_log_user_id_c564eba6_fk_auth_user_id
            references public.auth_user
            deferrable initially deferred
);

alter table public.django_admin_log
    owner to postgres;

create index if not exists django_admin_log_content_type_id_c4bce8eb
    on public.django_admin_log (content_type_id);

create index if not exists django_admin_log_user_id_c564eba6
    on public.django_admin_log (user_id);

create table if not exists public.django_session
(
    session_key  varchar(40)              not null
        primary key,
    session_data text                     not null,
    expire_date  timestamp with time zone not null
);

alter table public.django_session
    owner to postgres;

create index if not exists django_session_session_key_c0390e0f_like
    on public.django_session (session_key varchar_pattern_ops);

create index if not exists django_session_expire_date_a5c62663
    on public.django_session (expire_date);

create table if not exists public.customer_info
(
    user_id        serial primary key references public.auth_user,
    name           text      not null,
    phone          text      not null,
    address        text      not null,
    license_no     text      not null,
    license_expiry timestamp not null
);

alter table public.customer_info
    owner to postgres;

create table if not exists public.reservations
(
    id            serial
        primary key,
    user_id       integer
        references public.auth_user,
    vehicle_plate varchar(10)    not null
        references public.vehicles,
    owed_amount   numeric(10, 2) not null,
    pickup        timestamp      not null,
    dropoff       timestamp      not null,
    approved_at   timestamp,
    unique (vehicle_plate, pickup),
    constraint reservations_check
        check (pickup < dropoff)
);

alter table public.reservations
    owner to postgres;

create table if not exists public.staff_info
(
    user_id serial
        primary key
        references public.auth_user
);

alter table public.staff_info
    owner to postgres;

